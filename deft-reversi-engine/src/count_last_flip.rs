pub const COUNT_FLIP: [[u8; 256]; 8] = [
	[
		 0,  0,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,  6,  6,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,
		 8,  8,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,  6,  6,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,
		10, 10,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,  6,  6,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,
		 8,  8,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,  6,  6,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,
		12, 12,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,  6,  6,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,
		 8,  8,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,  6,  6,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,
		10, 10,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,  6,  6,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,
		 8,  8,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,  6,  6,  0,  0,  2,  2,  0,  0,  4,  4,  0,  0,  2,  2,  0,  0,
	],
	[
		 0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,  4,  4,  4,  4,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,
		 6,  6,  6,  6,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,  4,  4,  4,  4,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,
		 8,  8,  8,  8,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,  4,  4,  4,  4,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,
		 6,  6,  6,  6,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,  4,  4,  4,  4,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,
		10, 10, 10, 10,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,  4,  4,  4,  4,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,
		 6,  6,  6,  6,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,  4,  4,  4,  4,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,
		 8,  8,  8,  8,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,  4,  4,  4,  4,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,
		 6,  6,  6,  6,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,  4,  4,  4,  4,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,
	],
	[
		 0,  2,  0,  0,  0,  2,  0,  0,  0,  2,  0,  0,  0,  2,  0,  0,  2,  4,  2,  2,  2,  4,  2,  2,  0,  2,  0,  0,  0,  2,  0,  0,
		 4,  6,  4,  4,  4,  6,  4,  4,  0,  2,  0,  0,  0,  2,  0,  0,  2,  4,  2,  2,  2,  4,  2,  2,  0,  2,  0,  0,  0,  2,  0,  0,
		 6,  8,  6,  6,  6,  8,  6,  6,  0,  2,  0,  0,  0,  2,  0,  0,  2,  4,  2,  2,  2,  4,  2,  2,  0,  2,  0,  0,  0,  2,  0,  0,
		 4,  6,  4,  4,  4,  6,  4,  4,  0,  2,  0,  0,  0,  2,  0,  0,  2,  4,  2,  2,  2,  4,  2,  2,  0,  2,  0,  0,  0,  2,  0,  0,
		 8, 10,  8,  8,  8, 10,  8,  8,  0,  2,  0,  0,  0,  2,  0,  0,  2,  4,  2,  2,  2,  4,  2,  2,  0,  2,  0,  0,  0,  2,  0,  0,
		 4,  6,  4,  4,  4,  6,  4,  4,  0,  2,  0,  0,  0,  2,  0,  0,  2,  4,  2,  2,  2,  4,  2,  2,  0,  2,  0,  0,  0,  2,  0,  0,
		 6,  8,  6,  6,  6,  8,  6,  6,  0,  2,  0,  0,  0,  2,  0,  0,  2,  4,  2,  2,  2,  4,  2,  2,  0,  2,  0,  0,  0,  2,  0,  0,
		 4,  6,  4,  4,  4,  6,  4,  4,  0,  2,  0,  0,  0,  2,  0,  0,  2,  4,  2,  2,  2,  4,  2,  2,  0,  2,  0,  0,  0,  2,  0,  0,
	],
	[
		 0,  4,  2,  2,  0,  0,  0,  0,  0,  4,  2,  2,  0,  0,  0,  0,  0,  4,  2,  2,  0,  0,  0,  0,  0,  4,  2,  2,  0,  0,  0,  0,
		 2,  6,  4,  4,  2,  2,  2,  2,  2,  6,  4,  4,  2,  2,  2,  2,  0,  4,  2,  2,  0,  0,  0,  0,  0,  4,  2,  2,  0,  0,  0,  0,
		 4,  8,  6,  6,  4,  4,  4,  4,  4,  8,  6,  6,  4,  4,  4,  4,  0,  4,  2,  2,  0,  0,  0,  0,  0,  4,  2,  2,  0,  0,  0,  0,
		 2,  6,  4,  4,  2,  2,  2,  2,  2,  6,  4,  4,  2,  2,  2,  2,  0,  4,  2,  2,  0,  0,  0,  0,  0,  4,  2,  2,  0,  0,  0,  0,
		 6, 10,  8,  8,  6,  6,  6,  6,  6, 10,  8,  8,  6,  6,  6,  6,  0,  4,  2,  2,  0,  0,  0,  0,  0,  4,  2,  2,  0,  0,  0,  0,
		 2,  6,  4,  4,  2,  2,  2,  2,  2,  6,  4,  4,  2,  2,  2,  2,  0,  4,  2,  2,  0,  0,  0,  0,  0,  4,  2,  2,  0,  0,  0,  0,
		 4,  8,  6,  6,  4,  4,  4,  4,  4,  8,  6,  6,  4,  4,  4,  4,  0,  4,  2,  2,  0,  0,  0,  0,  0,  4,  2,  2,  0,  0,  0,  0,
		 2,  6,  4,  4,  2,  2,  2,  2,  2,  6,  4,  4,  2,  2,  2,  2,  0,  4,  2,  2,  0,  0,  0,  0,  0,  4,  2,  2,  0,  0,  0,  0,
	],
	[
		 0,  6,  4,  4,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  4,  4,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,
		 0,  6,  4,  4,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  4,  4,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,
		 2,  8,  6,  6,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  8,  6,  6,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,
		 0,  6,  4,  4,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  4,  4,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,
		 4, 10,  8,  8,  6,  6,  6,  6,  4,  4,  4,  4,  4,  4,  4,  4,  4, 10,  8,  8,  6,  6,  6,  6,  4,  4,  4,  4,  4,  4,  4,  4,
		 0,  6,  4,  4,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  4,  4,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,
		 2,  8,  6,  6,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  8,  6,  6,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,
		 0,  6,  4,  4,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  4,  4,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,
	],
	[
		 0,  8,  6,  6,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0,  8,  6,  6,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0,  8,  6,  6,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0,  8,  6,  6,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 2, 10,  8,  8,  6,  6,  6,  6,  4,  4,  4,  4,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		 2, 10,  8,  8,  6,  6,  6,  6,  4,  4,  4,  4,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		 0,  8,  6,  6,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0,  8,  6,  6,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	],
	[
		 0, 10,  8,  8,  6,  6,  6,  6,  4,  4,  4,  4,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0, 10,  8,  8,  6,  6,  6,  6,  4,  4,  4,  4,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0, 10,  8,  8,  6,  6,  6,  6,  4,  4,  4,  4,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0, 10,  8,  8,  6,  6,  6,  6,  4,  4,  4,  4,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	],
	[
		 0, 12, 10, 10,  8,  8,  8,  8,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
		 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0, 12, 10, 10,  8,  8,  8,  8,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
		 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	],
];

/* bit masks for diagonal lines */
#[cfg(not(target_feature = "bmi2"))]
pub const MASK_D: [[u64; 64]; 2] = [
	[
		0x0000000000000001_u64, 0x0000000000000102_u64, 0x0000000000010204_u64, 0x0000000001020408_u64,
		0x0000000102040810_u64, 0x0000010204081020_u64, 0x0001020408102040_u64, 0x0102040810204080_u64,
		0x0000000000000102_u64, 0x0000000000010204_u64, 0x0000000001020408_u64, 0x0000000102040810_u64,
		0x0000010204081020_u64, 0x0001020408102040_u64, 0x0102040810204080_u64, 0x0204081020408000_u64,
		0x0000000000010204_u64, 0x0000000001020408_u64, 0x0000000102040810_u64, 0x0000010204081020_u64,
		0x0001020408102040_u64, 0x0102040810204080_u64, 0x0204081020408000_u64, 0x0408102040800000_u64,
		0x0000000001020408_u64, 0x0000000102040810_u64, 0x0000010204081020_u64, 0x0001020408102040_u64,
		0x0102040810204080_u64, 0x0204081020408000_u64, 0x0408102040800000_u64, 0x0810204080000000_u64,
		0x0000000102040810_u64, 0x0000010204081020_u64, 0x0001020408102040_u64, 0x0102040810204080_u64,
		0x0204081020408000_u64, 0x0408102040800000_u64, 0x0810204080000000_u64, 0x1020408000000000_u64,
		0x0000010204081020_u64, 0x0001020408102040_u64, 0x0102040810204080_u64, 0x0204081020408000_u64,
		0x0408102040800000_u64, 0x0810204080000000_u64, 0x1020408000000000_u64, 0x2040800000000000_u64,
		0x0001020408102040_u64, 0x0102040810204080_u64, 0x0204081020408000_u64, 0x0408102040800000_u64,
		0x0810204080000000_u64, 0x1020408000000000_u64, 0x2040800000000000_u64, 0x4080000000000000_u64,
		0x0102040810204080_u64, 0x0204081020408000_u64, 0x0408102040800000_u64, 0x0810204080000000_u64,
		0x1020408000000000_u64, 0x2040800000000000_u64, 0x4080000000000000_u64, 0x8000000000000000_u64
	],
	[
		0x8040201008040201_u64, 0x0080402010080402_u64, 0x0000804020100804_u64, 0x0000008040201008_u64,
		0x0000000080402010_u64, 0x0000000000804020_u64, 0x0000000000008040_u64, 0x0000000000000080_u64,
		0x4020100804020100_u64, 0x8040201008040201_u64, 0x0080402010080402_u64, 0x0000804020100804_u64,
		0x0000008040201008_u64, 0x0000000080402010_u64, 0x0000000000804020_u64, 0x0000000000008040_u64,
		0x2010080402010000_u64, 0x4020100804020100_u64, 0x8040201008040201_u64, 0x0080402010080402_u64,
		0x0000804020100804_u64, 0x0000008040201008_u64, 0x0000000080402010_u64, 0x0000000000804020_u64,
		0x1008040201000000_u64, 0x2010080402010000_u64, 0x4020100804020100_u64, 0x8040201008040201_u64,
		0x0080402010080402_u64, 0x0000804020100804_u64, 0x0000008040201008_u64, 0x0000000080402010_u64,
		0x0804020100000000_u64, 0x1008040201000000_u64, 0x2010080402010000_u64, 0x4020100804020100_u64,
		0x8040201008040201_u64, 0x0080402010080402_u64, 0x0000804020100804_u64, 0x0000008040201008_u64,
		0x0402010000000000_u64, 0x0804020100000000_u64, 0x1008040201000000_u64, 0x2010080402010000_u64,
		0x4020100804020100_u64, 0x8040201008040201_u64, 0x0080402010080402_u64, 0x0000804020100804_u64,
		0x0201000000000000_u64, 0x0402010000000000_u64, 0x0804020100000000_u64, 0x1008040201000000_u64,
		0x2010080402010000_u64, 0x4020100804020100_u64, 0x8040201008040201_u64, 0x0080402010080402_u64,
		0x0100000000000000_u64, 0x0201000000000000_u64, 0x0402010000000000_u64, 0x0804020100000000_u64,
		0x1008040201000000_u64, 0x2010080402010000_u64, 0x4020100804020100_u64, 0x8040201008040201_u64
	]
];


// count_last_flip
// Optimization ideas : 
//    edax-reversi (Richard Delorme, Toshihiko Okuhara)
//    Edax src               : https://github.com/abulmo/edax-reversi/blob/master/src/count_last_flip_bmi2.c
//    Explanation by Okuhara : http://www.amy.hi-ho.ne.jp/okuhara/bitboard.htm
#[cfg(not(target_feature = "bmi2"))]
#[inline(always)]
pub fn count_last_flip(pos: usize, p: u64) -> i32 {
    let x = pos & 0x07;
    let y = pos >> 3;

    let count_flip_x = &COUNT_FLIP[x];

    let mut n_flipped = 0usize;
    n_flipped += COUNT_FLIP[y][((((p >> x) & 0x0101010101010101).wrapping_mul(0x0102040810204080)) >> 56) as usize] as usize;
    n_flipped += count_flip_x[(p >> (y * 8)) as u8 as usize]as usize;
    n_flipped += count_flip_x[(((p & MASK_D[0][pos]).wrapping_mul(0x0101010101010101)) >> 56) as usize]as usize;
    n_flipped += count_flip_x[(((p & MASK_D[1][pos]).wrapping_mul(0x0101010101010101)) >> 56) as usize]as usize;

    n_flipped as i32
}


#[cfg(target_feature = "bmi2")]
#[repr(align(32))]
struct AlignedMaskX([u64; 4]);


#[cfg(target_feature = "bmi2")]
const MASK_X: [AlignedMaskX; 66] = [
	AlignedMaskX([ 0x0000000000000001_u64, 0x8040201008040201_u64, 0x0101010101010101_u64, 0x81412111090503ff_u64 ]),
	AlignedMaskX([ 0x0000000000000102_u64, 0x0080402010080402_u64, 0x0202020202020202_u64, 0x02824222120a07ff_u64 ]),
	AlignedMaskX([ 0x0000000000010204_u64, 0x0000804020100804_u64, 0x0404040404040404_u64, 0x0404844424150eff_u64 ]),
	AlignedMaskX([ 0x0000000001020408_u64, 0x0000008040201008_u64, 0x0808080808080808_u64, 0x08080888492a1cff_u64 ]),
	AlignedMaskX([ 0x0000000102040810_u64, 0x0000000080402010_u64, 0x1010101010101010_u64, 0x10101011925438ff_u64 ]),
	AlignedMaskX([ 0x0000010204081020_u64, 0x0000000000804020_u64, 0x2020202020202020_u64, 0x2020212224a870ff_u64 ]),
	AlignedMaskX([ 0x0001020408102040_u64, 0x0000000000008040_u64, 0x4040404040404040_u64, 0x404142444850e0ff_u64 ]),
	AlignedMaskX([ 0x0102040810204080_u64, 0x0000000000000080_u64, 0x8080808080808080_u64, 0x8182848890a0c0ff_u64 ]),
	AlignedMaskX([ 0x0000000000000102_u64, 0x4020100804020104_u64, 0x0101010101010101_u64, 0x412111090503ff03_u64 ]),
	AlignedMaskX([ 0x0000000000010204_u64, 0x8040201008040201_u64, 0x0202020202020202_u64, 0x824222120a07ff07_u64 ]),
	AlignedMaskX([ 0x0000000001020408_u64, 0x0080402010080402_u64, 0x0404040404040404_u64, 0x04844424150eff0e_u64 ]),
	AlignedMaskX([ 0x0000000102040810_u64, 0x0000804020100804_u64, 0x0808080808080808_u64, 0x080888492a1cff1c_u64 ]),
	AlignedMaskX([ 0x0000010204081020_u64, 0x0000008040201008_u64, 0x1010101010101010_u64, 0x101011925438ff38_u64 ]),
	AlignedMaskX([ 0x0001020408102040_u64, 0x0000000080402010_u64, 0x2020202020202020_u64, 0x20212224a870ff70_u64 ]),
	AlignedMaskX([ 0x0102040810204080_u64, 0x0000000000804020_u64, 0x4040404040404040_u64, 0x4142444850e0ffe0_u64 ]),
	AlignedMaskX([ 0x0204081020408001_u64, 0x0000000000008040_u64, 0x8080808080808080_u64, 0x82848890a0c0ffc0_u64 ]),
	AlignedMaskX([ 0x0000000000010204_u64, 0x201008040201000a_u64, 0x0101010101010101_u64, 0x2111090503ff0305_u64 ]),
	AlignedMaskX([ 0x0000000001020408_u64, 0x4020100804020101_u64, 0x0202020202020202_u64, 0x4222120a07ff070a_u64 ]),
	AlignedMaskX([ 0x0000000102040810_u64, 0x8040201008040201_u64, 0x0404040404040404_u64, 0x844424150eff0e15_u64 ]),
	AlignedMaskX([ 0x0000010204081020_u64, 0x0080402010080402_u64, 0x0808080808080808_u64, 0x0888492a1cff1c2a_u64 ]),
	AlignedMaskX([ 0x0001020408102040_u64, 0x0000804020100804_u64, 0x1010101010101010_u64, 0x1011925438ff3854_u64 ]),
	AlignedMaskX([ 0x0102040810204080_u64, 0x0000008040201008_u64, 0x2020202020202020_u64, 0x212224a870ff70a8_u64 ]),
	AlignedMaskX([ 0x0204081020408001_u64, 0x0000000080402010_u64, 0x4040404040404040_u64, 0x42444850e0ffe050_u64 ]),
	AlignedMaskX([ 0x0408102040800003_u64, 0x0000000000804020_u64, 0x8080808080808080_u64, 0x848890a0c0ffc0a0_u64 ]),
	AlignedMaskX([ 0x0000000001020408_u64, 0x1008040201000016_u64, 0x0101010101010101_u64, 0x11090503ff030509_u64 ]),
	AlignedMaskX([ 0x0000000102040810_u64, 0x2010080402010005_u64, 0x0202020202020202_u64, 0x22120a07ff070a12_u64 ]),
	AlignedMaskX([ 0x0000010204081020_u64, 0x4020100804020101_u64, 0x0404040404040404_u64, 0x4424150eff0e1524_u64 ]),
	AlignedMaskX([ 0x0001020408102040_u64, 0x8040201008040201_u64, 0x0808080808080808_u64, 0x88492a1cff1c2a49_u64 ]),
	AlignedMaskX([ 0x0102040810204080_u64, 0x0080402010080402_u64, 0x1010101010101010_u64, 0x11925438ff385492_u64 ]),
	AlignedMaskX([ 0x0204081020408001_u64, 0x0000804020100804_u64, 0x2020202020202020_u64, 0x2224a870ff70a824_u64 ]),
	AlignedMaskX([ 0x0408102040800003_u64, 0x0000008040201008_u64, 0x4040404040404040_u64, 0x444850e0ffe05048_u64 ]),
	AlignedMaskX([ 0x0810204080000007_u64, 0x0000000080402010_u64, 0x8080808080808080_u64, 0x8890a0c0ffc0a090_u64 ]),
	AlignedMaskX([ 0x0000000102040810_u64, 0x080402010000002e_u64, 0x0101010101010101_u64, 0x090503ff03050911_u64 ]),
	AlignedMaskX([ 0x0000010204081020_u64, 0x100804020100000d_u64, 0x0202020202020202_u64, 0x120a07ff070a1222_u64 ]),
	AlignedMaskX([ 0x0001020408102040_u64, 0x2010080402010003_u64, 0x0404040404040404_u64, 0x24150eff0e152444_u64 ]),
	AlignedMaskX([ 0x0102040810204080_u64, 0x4020100804020101_u64, 0x0808080808080808_u64, 0x492a1cff1c2a4988_u64 ]),
	AlignedMaskX([ 0x0204081020408002_u64, 0x8040201008040201_u64, 0x1010101010101010_u64, 0x925438ff38549211_u64 ]),
	AlignedMaskX([ 0x0408102040800005_u64, 0x0080402010080402_u64, 0x2020202020202020_u64, 0x24a870ff70a82422_u64 ]),
	AlignedMaskX([ 0x081020408000000b_u64, 0x0000804020100804_u64, 0x4040404040404040_u64, 0x4850e0ffe0504844_u64 ]),
	AlignedMaskX([ 0x1020408000000017_u64, 0x0000008040201008_u64, 0x8080808080808080_u64, 0x90a0c0ffc0a09088_u64 ]),
	AlignedMaskX([ 0x0000010204081020_u64, 0x040201000000005e_u64, 0x0101010101010101_u64, 0x0503ff0305091121_u64 ]),
	AlignedMaskX([ 0x0001020408102040_u64, 0x080402010000001d_u64, 0x0202020202020202_u64, 0x0a07ff070a122242_u64 ]),
	AlignedMaskX([ 0x0102040810204080_u64, 0x100804020100000b_u64, 0x0404040404040404_u64, 0x150eff0e15244484_u64 ]),
	AlignedMaskX([ 0x0204081020408001_u64, 0x2010080402010003_u64, 0x0808080808080808_u64, 0x2a1cff1c2a498808_u64 ]),
	AlignedMaskX([ 0x0408102040800003_u64, 0x4020100804020101_u64, 0x1010101010101010_u64, 0x5438ff3854921110_u64 ]),
	AlignedMaskX([ 0x081020408000000e_u64, 0x8040201008040201_u64, 0x2020202020202020_u64, 0xa870ff70a8242221_u64 ]),
	AlignedMaskX([ 0x102040800000001d_u64, 0x0080402010080402_u64, 0x4040404040404040_u64, 0x50e0ffe050484442_u64 ]),
	AlignedMaskX([ 0x204080000000003b_u64, 0x0000804020100804_u64, 0x8080808080808080_u64, 0xa0c0ffc0a0908884_u64 ]),
	AlignedMaskX([ 0x0001020408102040_u64, 0x02010000000000be_u64, 0x0101010101010101_u64, 0x03ff030509112141_u64 ]),
	AlignedMaskX([ 0x0102040810204080_u64, 0x040201000000003d_u64, 0x0202020202020202_u64, 0x07ff070a12224282_u64 ]),
	AlignedMaskX([ 0x0204081020408001_u64, 0x080402010000001b_u64, 0x0404040404040404_u64, 0x0eff0e1524448404_u64 ]),
	AlignedMaskX([ 0x0408102040800003_u64, 0x1008040201000007_u64, 0x0808080808080808_u64, 0x1cff1c2a49880808_u64 ]),
	AlignedMaskX([ 0x0810204080000007_u64, 0x2010080402010003_u64, 0x1010101010101010_u64, 0x38ff385492111010_u64 ]),
	AlignedMaskX([ 0x102040800000000f_u64, 0x4020100804020101_u64, 0x2020202020202020_u64, 0x70ff70a824222120_u64 ]),
	AlignedMaskX([ 0x204080000000003e_u64, 0x8040201008040201_u64, 0x4040404040404040_u64, 0xe0ffe05048444241_u64 ]),
	AlignedMaskX([ 0x408000000000007d_u64, 0x0080402010080402_u64, 0x8080808080808080_u64, 0xc0ffc0a090888482_u64 ]),
	AlignedMaskX([ 0x0102040810204080_u64, 0x010000000000027e_u64, 0x0101010101010101_u64, 0xff03050911214181_u64 ]),
	AlignedMaskX([ 0x0204081020408001_u64, 0x020100000000007d_u64, 0x0202020202020202_u64, 0xff070a1222428202_u64 ]),
	AlignedMaskX([ 0x0408102040800003_u64, 0x040201000000003b_u64, 0x0404040404040404_u64, 0xff0e152444840404_u64 ]),
	AlignedMaskX([ 0x0810204080000007_u64, 0x0804020100000017_u64, 0x0808080808080808_u64, 0xff1c2a4988080808_u64 ]),
	AlignedMaskX([ 0x102040800000000f_u64, 0x1008040201000007_u64, 0x1010101010101010_u64, 0xff38549211101010_u64 ]),
	AlignedMaskX([ 0x204080000000001f_u64, 0x2010080402010003_u64, 0x2020202020202020_u64, 0xff70a82422212020_u64 ]),
	AlignedMaskX([ 0x408000000000003f_u64, 0x4020100804020101_u64, 0x4040404040404040_u64, 0xffe0504844424140_u64 ]),
	AlignedMaskX([ 0x800000000000017e_u64, 0x8040201008040201_u64, 0x8080808080808080_u64, 0xffc0a09088848281_u64 ]),
	AlignedMaskX([ 0, 0, 0, 0 ]),	// pass
	AlignedMaskX([ 0, 0, 0, 0 ])

];

// Using PEXT(BMI2)
// Optimization ideas : 
//    edax-reversi (Richard Delorme, Toshihiko Okuhara)
//    Edax src               : https://github.com/abulmo/edax-reversi/blob/master/src/count_last_flip_bmi2.c
//    Explanation by Okuhara : http://www.amy.hi-ho.ne.jp/okuhara/bitboard.htm
// 
// PEXT is fast on Intel, but very slow on AMD up to Zen2 with microcode processing.
#[cfg(target_feature = "bmi2")]
use std::arch::x86_64::_pext_u64;
#[cfg(target_feature = "bmi2")]
#[inline(always)]
pub fn count_last_flip(x: usize, mut p: u64) -> i32
{
	let h = x & 7;
	let v = x >> 3;
	let mask_x = &MASK_X[x].0;

	p &= mask_x[3];	// mask out unrelated bits to make dummy 0 bits for outside
	// n_flipped  = COUNT_FLIP[x][_bextr_u64(P, pos & 0x38, 8)];
	let mut n_flipped  = COUNT_FLIP[h][((p >> (x & 0x38)) & 0xFF) as usize];
	unsafe {
		n_flipped += COUNT_FLIP[v][_pext_u64(p, mask_x[0]) as usize];
		n_flipped += COUNT_FLIP[v][_pext_u64(p, mask_x[1]) as usize];
		n_flipped += COUNT_FLIP[v][_pext_u64(p, mask_x[2]) as usize];
	} 
	n_flipped as i32
}
