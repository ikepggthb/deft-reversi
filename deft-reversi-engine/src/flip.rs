
//  Optimization ideas by acepck
//  https://github.com/Nyanyan/Egaroucid/pull/293
//  Refered to Edax
//    Edax src               : https://github.com/abulmo/edax-reversi
//    Explanation by Okuhara : http://www.amy.hi-ho.ne.jp/okuhara/bitboard.htm


#[cfg(target_feature = "avx2")]
use std::arch::x86_64::*;


#[cfg(target_feature = "avx2")]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct V8DI(pub [u64; 8]);


#[cfg(target_feature = "avx2")]
const LR_MASK: [V8DI; 66] = [
	V8DI([ 0x00000000000000fe, 0x0101010101010100, 0x8040201008040200, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 ]),
	V8DI([ 0x00000000000000fc, 0x0202020202020200, 0x0080402010080400, 0x0000000000000100, 0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 ]),
	V8DI([ 0x00000000000000f8, 0x0404040404040400, 0x0000804020100800, 0x0000000000010200, 0x0000000000000003, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 ]),
	V8DI([ 0x00000000000000f0, 0x0808080808080800, 0x0000008040201000, 0x0000000001020400, 0x0000000000000007, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 ]),
	V8DI([ 0x00000000000000e0, 0x1010101010101000, 0x0000000080402000, 0x0000000102040800, 0x000000000000000f, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 ]),
	V8DI([ 0x00000000000000c0, 0x2020202020202000, 0x0000000000804000, 0x0000010204081000, 0x000000000000001f, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 ]),
	V8DI([ 0x0000000000000080, 0x4040404040404000, 0x0000000000008000, 0x0001020408102000, 0x000000000000003f, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 ]),
	V8DI([ 0x0000000000000000, 0x8080808080808000, 0x0000000000000000, 0x0102040810204000, 0x000000000000007f, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 ]),
	V8DI([ 0x000000000000fe00, 0x0101010101010000, 0x4020100804020000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, 0x0000000000000002 ]),
	V8DI([ 0x000000000000fc00, 0x0202020202020000, 0x8040201008040000, 0x0000000000010000, 0x0000000000000100, 0x0000000000000002, 0x0000000000000001, 0x0000000000000004 ]),
	V8DI([ 0x000000000000f800, 0x0404040404040000, 0x0080402010080000, 0x0000000001020000, 0x0000000000000300, 0x0000000000000004, 0x0000000000000002, 0x0000000000000008 ]),
	V8DI([ 0x000000000000f000, 0x0808080808080000, 0x0000804020100000, 0x0000000102040000, 0x0000000000000700, 0x0000000000000008, 0x0000000000000004, 0x0000000000000010 ]),
	V8DI([ 0x000000000000e000, 0x1010101010100000, 0x0000008040200000, 0x0000010204080000, 0x0000000000000f00, 0x0000000000000010, 0x0000000000000008, 0x0000000000000020 ]),
	V8DI([ 0x000000000000c000, 0x2020202020200000, 0x0000000080400000, 0x0001020408100000, 0x0000000000001f00, 0x0000000000000020, 0x0000000000000010, 0x0000000000000040 ]),
	V8DI([ 0x0000000000008000, 0x4040404040400000, 0x0000000000800000, 0x0102040810200000, 0x0000000000003f00, 0x0000000000000040, 0x0000000000000020, 0x0000000000000080 ]),
	V8DI([ 0x0000000000000000, 0x8080808080800000, 0x0000000000000000, 0x0204081020400000, 0x0000000000007f00, 0x0000000000000080, 0x0000000000000040, 0x0000000000000000 ]),
	V8DI([ 0x0000000000fe0000, 0x0101010101000000, 0x2010080402000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000101, 0x0000000000000000, 0x0000000000000204 ]),
	V8DI([ 0x0000000000fc0000, 0x0202020202000000, 0x4020100804000000, 0x0000000001000000, 0x0000000000010000, 0x0000000000000202, 0x0000000000000100, 0x0000000000000408 ]),
	V8DI([ 0x0000000000f80000, 0x0404040404000000, 0x8040201008000000, 0x0000000102000000, 0x0000000000030000, 0x0000000000000404, 0x0000000000000201, 0x0000000000000810 ]),
	V8DI([ 0x0000000000f00000, 0x0808080808000000, 0x0080402010000000, 0x0000010204000000, 0x0000000000070000, 0x0000000000000808, 0x0000000000000402, 0x0000000000001020 ]),
	V8DI([ 0x0000000000e00000, 0x1010101010000000, 0x0000804020000000, 0x0001020408000000, 0x00000000000f0000, 0x0000000000001010, 0x0000000000000804, 0x0000000000002040 ]),
	V8DI([ 0x0000000000c00000, 0x2020202020000000, 0x0000008040000000, 0x0102040810000000, 0x00000000001f0000, 0x0000000000002020, 0x0000000000001008, 0x0000000000004080 ]),
	V8DI([ 0x0000000000800000, 0x4040404040000000, 0x0000000080000000, 0x0204081020000000, 0x00000000003f0000, 0x0000000000004040, 0x0000000000002010, 0x0000000000008000 ]),
	V8DI([ 0x0000000000000000, 0x8080808080000000, 0x0000000000000000, 0x0408102040000000, 0x00000000007f0000, 0x0000000000008080, 0x0000000000004020, 0x0000000000000000 ]),
	V8DI([ 0x00000000fe000000, 0x0101010100000000, 0x1008040200000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000010101, 0x0000000000000000, 0x0000000000020408 ]),
	V8DI([ 0x00000000fc000000, 0x0202020200000000, 0x2010080400000000, 0x0000000100000000, 0x0000000001000000, 0x0000000000020202, 0x0000000000010000, 0x0000000000040810 ]),
	V8DI([ 0x00000000f8000000, 0x0404040400000000, 0x4020100800000000, 0x0000010200000000, 0x0000000003000000, 0x0000000000040404, 0x0000000000020100, 0x0000000000081020 ]),
	V8DI([ 0x00000000f0000000, 0x0808080800000000, 0x8040201000000000, 0x0001020400000000, 0x0000000007000000, 0x0000000000080808, 0x0000000000040201, 0x0000000000102040 ]),
	V8DI([ 0x00000000e0000000, 0x1010101000000000, 0x0080402000000000, 0x0102040800000000, 0x000000000f000000, 0x0000000000101010, 0x0000000000080402, 0x0000000000204080 ]),
	V8DI([ 0x00000000c0000000, 0x2020202000000000, 0x0000804000000000, 0x0204081000000000, 0x000000001f000000, 0x0000000000202020, 0x0000000000100804, 0x0000000000408000 ]),
	V8DI([ 0x0000000080000000, 0x4040404000000000, 0x0000008000000000, 0x0408102000000000, 0x000000003f000000, 0x0000000000404040, 0x0000000000201008, 0x0000000000800000 ]),
	V8DI([ 0x0000000000000000, 0x8080808000000000, 0x0000000000000000, 0x0810204000000000, 0x000000007f000000, 0x0000000000808080, 0x0000000000402010, 0x0000000000000000 ]),
	V8DI([ 0x000000fe00000000, 0x0101010000000000, 0x0804020000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000001010101, 0x0000000000000000, 0x0000000002040810 ]),
	V8DI([ 0x000000fc00000000, 0x0202020000000000, 0x1008040000000000, 0x0000010000000000, 0x0000000100000000, 0x0000000002020202, 0x0000000001000000, 0x0000000004081020 ]),
	V8DI([ 0x000000f800000000, 0x0404040000000000, 0x2010080000000000, 0x0001020000000000, 0x0000000300000000, 0x0000000004040404, 0x0000000002010000, 0x0000000008102040 ]),
	V8DI([ 0x000000f000000000, 0x0808080000000000, 0x4020100000000000, 0x0102040000000000, 0x0000000700000000, 0x0000000008080808, 0x0000000004020100, 0x0000000010204080 ]),
	V8DI([ 0x000000e000000000, 0x1010100000000000, 0x8040200000000000, 0x0204080000000000, 0x0000000f00000000, 0x0000000010101010, 0x0000000008040201, 0x0000000020408000 ]),
	V8DI([ 0x000000c000000000, 0x2020200000000000, 0x0080400000000000, 0x0408100000000000, 0x0000001f00000000, 0x0000000020202020, 0x0000000010080402, 0x0000000040800000 ]),
	V8DI([ 0x0000008000000000, 0x4040400000000000, 0x0000800000000000, 0x0810200000000000, 0x0000003f00000000, 0x0000000040404040, 0x0000000020100804, 0x0000000080000000 ]),
	V8DI([ 0x0000000000000000, 0x8080800000000000, 0x0000000000000000, 0x1020400000000000, 0x0000007f00000000, 0x0000000080808080, 0x0000000040201008, 0x0000000000000000 ]),
	V8DI([ 0x0000fe0000000000, 0x0101000000000000, 0x0402000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000101010101, 0x0000000000000000, 0x0000000204081020 ]),
	V8DI([ 0x0000fc0000000000, 0x0202000000000000, 0x0804000000000000, 0x0001000000000000, 0x0000010000000000, 0x0000000202020202, 0x0000000100000000, 0x0000000408102040 ]),
	V8DI([ 0x0000f80000000000, 0x0404000000000000, 0x1008000000000000, 0x0102000000000000, 0x0000030000000000, 0x0000000404040404, 0x0000000201000000, 0x0000000810204080 ]),
	V8DI([ 0x0000f00000000000, 0x0808000000000000, 0x2010000000000000, 0x0204000000000000, 0x0000070000000000, 0x0000000808080808, 0x0000000402010000, 0x0000001020408000 ]),
	V8DI([ 0x0000e00000000000, 0x1010000000000000, 0x4020000000000000, 0x0408000000000000, 0x00000f0000000000, 0x0000001010101010, 0x0000000804020100, 0x0000002040800000 ]),
	V8DI([ 0x0000c00000000000, 0x2020000000000000, 0x8040000000000000, 0x0810000000000000, 0x00001f0000000000, 0x0000002020202020, 0x0000001008040201, 0x0000004080000000 ]),
	V8DI([ 0x0000800000000000, 0x4040000000000000, 0x0080000000000000, 0x1020000000000000, 0x00003f0000000000, 0x0000004040404040, 0x0000002010080402, 0x0000008000000000 ]),
	V8DI([ 0x0000000000000000, 0x8080000000000000, 0x0000000000000000, 0x2040000000000000, 0x00007f0000000000, 0x0000008080808080, 0x0000004020100804, 0x0000000000000000 ]),
	V8DI([ 0x00fe000000000000, 0x0100000000000000, 0x0200000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000010101010101, 0x0000000000000000, 0x0000020408102040 ]),
	V8DI([ 0x00fc000000000000, 0x0200000000000000, 0x0400000000000000, 0x0100000000000000, 0x0001000000000000, 0x0000020202020202, 0x0000010000000000, 0x0000040810204080 ]),
	V8DI([ 0x00f8000000000000, 0x0400000000000000, 0x0800000000000000, 0x0200000000000000, 0x0003000000000000, 0x0000040404040404, 0x0000020100000000, 0x0000081020408000 ]),
	V8DI([ 0x00f0000000000000, 0x0800000000000000, 0x1000000000000000, 0x0400000000000000, 0x0007000000000000, 0x0000080808080808, 0x0000040201000000, 0x0000102040800000 ]),
	V8DI([ 0x00e0000000000000, 0x1000000000000000, 0x2000000000000000, 0x0800000000000000, 0x000f000000000000, 0x0000101010101010, 0x0000080402010000, 0x0000204080000000 ]),
	V8DI([ 0x00c0000000000000, 0x2000000000000000, 0x4000000000000000, 0x1000000000000000, 0x001f000000000000, 0x0000202020202020, 0x0000100804020100, 0x0000408000000000 ]),
	V8DI([ 0x0080000000000000, 0x4000000000000000, 0x8000000000000000, 0x2000000000000000, 0x003f000000000000, 0x0000404040404040, 0x0000201008040201, 0x0000800000000000 ]),
	V8DI([ 0x0000000000000000, 0x8000000000000000, 0x0000000000000000, 0x4000000000000000, 0x007f000000000000, 0x0000808080808080, 0x0000402010080402, 0x0000000000000000 ]),
	V8DI([ 0xfe00000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0001010101010101, 0x0000000000000000, 0x0002040810204080 ]),
	V8DI([ 0xfc00000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0100000000000000, 0x0002020202020202, 0x0001000000000000, 0x0004081020408000 ]),
	V8DI([ 0xf800000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0300000000000000, 0x0004040404040404, 0x0002010000000000, 0x0008102040800000 ]),
	V8DI([ 0xf000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0700000000000000, 0x0008080808080808, 0x0004020100000000, 0x0010204080000000 ]),
	V8DI([ 0xe000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0f00000000000000, 0x0010101010101010, 0x0008040201000000, 0x0020408000000000 ]),
	V8DI([ 0xc000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x1f00000000000000, 0x0020202020202020, 0x0010080402010000, 0x0040800000000000 ]),
	V8DI([ 0x8000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3f00000000000000, 0x0040404040404040, 0x0020100804020100, 0x0080000000000000 ]),
	V8DI([ 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x7f00000000000000, 0x0080808080808080, 0x0040201008040201, 0x0000000000000000 ]),
	V8DI([ 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 ]),	// pass
	V8DI([ 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 ])
];


// #[cfg(target_feature = "sse2")]
// #[inline(always)]
// pub unsafe fn load_128(v: &V8DI) -> [__m128i; 4] {
//     [
//         _mm_load_si128(v.0.as_ptr() as *const __m128i),
//         _mm_load_si128(v.0.as_ptr().add(2) as *const __m128i),
//         _mm_load_si128(v.0.as_ptr().add(4) as *const __m128i),
//         _mm_load_si128(v.0.as_ptr().add(6) as *const __m128i),
//     ]
// }

#[cfg(target_feature = "avx2")]
#[inline(always)]
pub unsafe fn load_256(v: &V8DI) -> [__m256i; 2] {
    // v.0.as_ptr()は *const u64、つまり先頭ポインタ
    // これを __m256i(32バイト) のポインタにキャストしてロード
    [
        _mm256_load_si256(v.0.as_ptr() as *const __m256i),
        _mm256_load_si256(v.0.as_ptr().add(4) as *const __m256i),
    ]
}

// #[cfg(target_feature = "avx512f")]
// #[inline(always)]
// pub unsafe fn load_512(v: &V8DI) -> __m512i {
//     _mm512_load_si512(v.0.as_ptr() as *const __m512i)
// }


#[cfg(target_feature = "avx2")]
#[inline]
pub unsafe fn mm_flip(OP: __m128i, pos: usize) -> __m128i {
    let pp = _mm256_broadcastq_epi64(OP);
    let op_hi = _mm_unpackhi_epi64(OP, OP);
    let oo = _mm256_broadcastq_epi64(op_hi);

    let masks = load_256(&LR_MASK[pos]);
    let mut mask = masks[1];
    
    // Right shadow calculation
    let rp = _mm256_and_si256(pp, mask);
    let shift1 = _mm256_srlv_epi64(rp, _mm256_set_epi64x(7, 9, 8, 1));
    let mut rs = _mm256_or_si256(rp, shift1);
    let shift2 = _mm256_srlv_epi64(rs, _mm256_set_epi64x(14, 18, 16, 2));
    rs = _mm256_or_si256(rs, shift2);
    let shift3 = _mm256_srlv_epi64(rs, _mm256_set_epi64x(28, 36, 32, 4));
    rs = _mm256_or_si256(rs, shift3);

    let re = _mm256_xor_si256(_mm256_andnot_si256(oo, mask), rp);
    let flip = _mm256_and_si256(
        _mm256_andnot_si256(rs, mask),
        _mm256_cmpgt_epi64(rp, re)
    );

    // Left calculation
    mask = masks[0];
    let lo = {
        let tmp = _mm256_andnot_si256(oo, mask);
        _mm256_and_si256(
            _mm256_xor_si256(
                _mm256_add_epi64(tmp, _mm256_set1_epi64x(-1)),
                tmp
            ),
            mask
        )
    };

    let lf = _mm256_andnot_si256(pp, lo);
    let flip = _mm256_or_si256(
        flip,
        _mm256_andnot_si256(
            _mm256_cmpeq_epi64(lf, lo),
            lf
        )
    );

    _mm_or_si128(
        _mm256_castsi256_si128(flip),
        _mm256_extracti128_si256(flip, 1)
    )
}

#[cfg(target_feature = "avx2")]
#[inline]
pub unsafe fn flip_avx2(x: usize, p: u64, o: u64) -> u64 {
    let op = _mm_set_epi64x(o as i64, p as i64);
    let flip = mm_flip(op, x);
    let rflip = _mm_or_si128(flip, _mm_shuffle_epi32(flip, 0x4e));
    _mm_cvtsi128_si64(rflip) as u64
}


#[inline(always)]
pub fn flip_std(move_bit: u64, p: u64, o: u64) -> u64 {

    let x = move_bit;
    let mut flip = 0;
    {
        let m_o = o & 0x7e7e7e7e7e7e7e7e;
        let mut f = (x << 1) & m_o;
        f |= (f << 1) & m_o;
        let pre = m_o & (m_o << 1);
        f |= (f << 2) & pre;
        f |= (f << 2) & pre;
        let outflank = p & (f << 1);
        f &= -((outflank != 0) as i64) as u64;
        flip |= f;
    }

    // 右方向 (x >> 1)
    {
        let m_o = o & 0x7e7e7e7e7e7e7e7e;
        let mut f = (x >> 1) & m_o;
        f |= (f >> 1) & m_o;
        let pre = m_o & (m_o >> 1);
        f |= (f >> 2) & pre;
        f |= (f >> 2) & pre;
        let outflank = p & (f >> 1);
        f &= -((outflank != 0) as i64) as u64;
        flip |= f;
    }

    // 上方向 (x << 8)
    {
        let m_o = o & 0xffffffffffffff00;
        let mut f = (x << 8) & m_o;
        f |= (f << 8) & m_o;
        let pre = m_o & (m_o << 8);
        f |= (f << 16) & pre;
        f |= (f << 16) & pre;
        let outflank = p & (f << 8);
        f &= -((outflank != 0) as i64) as u64;
        flip |= f;
    }

    // 下方向 (x >> 8)
    {
        let m_o = o & 0xffffffffffffff00;
        let mut f = (x >> 8) & m_o;
        f |= (f >> 8) & m_o;
        let pre = m_o & (m_o >> 8);
        f |= (f >> 16) & pre;
        f |= (f >> 16) & pre;
        let outflank = p & (f >> 8);
        f &= -((outflank != 0) as i64) as u64;
        flip |= f;
    }

    // 斜め左上・右下方向 (x << 7, x >> 7)
    {
        let m_o = o & 0x007e7e7e7e7e7e00;

        // 左上方向 (x << 7)
        {
            let mut f = (x << 7) & m_o;
            f |= (f << 7) & m_o;
            let pre = m_o & (m_o << 7);
            f |= (f << 14) & pre;
            f |= (f << 14) & pre;
            let outflank = p & (f << 7);
            f &= -((outflank != 0) as i64) as u64;
            flip |= f;
        }

        // 右下方向 (x >> 7)
        {
            let mut f = (x >> 7) & m_o;
            f |= (f >> 7) & m_o;
            let pre = m_o & (m_o >> 7);
            f |= (f >> 14) & pre;
            f |= (f >> 14) & pre;
            let outflank = p & (f >> 7);
            f &= -((outflank != 0) as i64) as u64;
            flip |= f;
        }
    }

    // 斜め左下・右上方向 (x << 9, x >> 9)
    {
        let m_o = o & 0x007e7e7e7e7e7e00;

        // 左下方向 (x << 9)
        {
            let mut f = (x << 9) & m_o;
            f |= (f << 9) & m_o;
            let pre = m_o & (m_o << 9);
            f |= (f << 18) & pre;
            f |= (f << 18) & pre;
            let outflank = p & (f << 9);
            f &= -((outflank != 0) as i64) as u64;
            flip |= f;
        }

        // 右上方向 (x >> 9)
        {
            let mut f = (x >> 9) & m_o;
            f |= (f >> 9) & m_o;
            let pre = m_o & (m_o >> 9);
            f |= (f >> 18) & pre;
            f |= (f >> 18) & pre;
            let outflank = p & (f >> 9);
            f &= -((outflank != 0) as i64) as u64;
            flip |= f;
        }
    }
    flip
}